#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# :license: WTFPL

import sys; reload(sys);
sys.setdefaultencoding('utf-8')

import io
import os
import re
import socket
import locale

from string import Template

from cgi import escape
from urllib2 import Request, urlopen, HTTPError, URLError

from os.path import expanduser
from optparse import OptionParser

import tweepy

CONSUMER_KEY = 'APPbntMLcMDuPwTahEJgA'
CONSUMER_SECRET = 'dZH2BChokybq8suqOJWwYZqV2J7UtTrFAglXeWyh0'

ACCESS_KEY = None
ACCESS_SECRET = None

entry = Template('''<item>
    <title>${title}</title>
    <link>${link}</link>
    <description>${content}</description>
    <pubDate>${date}</pubDate>
    <guid>${link}</guid>
</item>''')


class HeadRequest(Request):
    def get_method(self):
        return "HEAD"


def process(text):
    """process(text) takes a twitter message and unpack the url, link
    @user and links #hash"""

    def url(text):
        for url in re.findall('https?://[^ ]+', text):
            try:
                real = urlopen(HeadRequest(url)).geturl()
            except (HTTPError, URLError):
                real = url
            text = text.replace(url, '<a href="%s">%s</a>' % (real, real))
        return text

    def at(text):
        """converts @user to <a href="http://twitter.com/user">@user</a>"""
        return re.sub(r'@([\w\d_]+)', r'<a href="http://twitter.com/\1">@\1</a>', text)

    def hash(text):
        """converts #hash to <a href="http://twitter.com/search?q=#hash">#hash</a>"""
        return re.sub(r'#([\w\d]+)', r'<a href="http://twitter.com/search?q=%23\1">#\1</a>', text)

    text = url(text)
    text = at(text)
    text = hash(text)

    return text


def parse_source(src, opts={}):
    """parse_source(src, opts) processes the input string and returns a function
    which fetches the specified resource. The returned function takes a single
    argument, a tweepy.API object instance. opts is a dict of optional
    parameters to be sent in the request. Valid resources are user timelines and
    list timelines. Example source strings:

                                 # timeline of the currently authorized user
        lists/list               # "list" list managed by the currenly authorized user
        sample_user              # profile of sample_user
        sample_user/lists/list1  # "list1" list managed by sample_user"""

    s = [x for x in src.split('/') if x]

    if len(s) == 3 and s[1] == 'lists':
        return lambda api: api.list_timeline(owner_screen_name=s[0], slug=s[2], **opts)
    if len(s) == 2 and s[0] == 'lists':
        return lambda api: api.list_timeline(owner_id=api.me().id, slug=s[1], **opts)
    elif len(s) == 1:
        return lambda api: api.user_timeline(id=s[0], **opts)
    elif len(s) == 0:
        return lambda api: api.home_timeline(**opts)
    else:
        raise Exception('invalid source string: %s' % src)


if __name__ == '__main__':

    usage = '%prog [options]'
    options = []

    parser = OptionParser(option_list=options, usage=usage)
    options, args = parser.parse_args()

    if args:
        src = args[0]
    else:
        src = ''

    fetch_tweets = parse_source(src, {'count': 50})

    path = expanduser('~/.twirss')

    try:
        with io.open(path, 'r') as fp:
            ACCESS_KEY, ACCESS_SECRET = fp.readline().split(':', 1)
    except ValueError, IOError:
        auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET, 'oob')
        auth_url = auth.get_authorization_url()

        print 'Please authorize: ' + auth_url
        verifier = raw_input('PIN: ').strip()
        auth.get_access_token(verifier)

        with io.open(path, 'w') as fp:
            fp.write(u':'.join([auth.access_token, auth.access_token_secret]))

        os.execv(sys.executable, [sys.executable] + sys.argv[:])

    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
    auth.set_access_token(ACCESS_KEY, ACCESS_SECRET)
    api = tweepy.API(auth)

    Timeline = fetch_tweets(api)

    if not src:
        src = api.me().screen_name

    locale.setlocale(locale.LC_TIME, 'C') # tweepy fix

    print '<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">'
    print '<channel>'
    print '     <title>Timeline: %s</title>' % src
    print '     <link>http://twitter.com/%s</link>' % src
    print '     <description>twirss - a simple tweet-to-atom feed aggregator</description>'
    print '     <language>de-DE</language>' # FIXME: there is something like locale.getlocale...
    print '<pubDate>%s</pubDate>' % Timeline[0].created_at.strftime('%a, %d %b %Y %H:%M:%S GMT') # last update
    print '<atom:link href="/" rel="self" type="application/rss+xml" />'

    for Tweet in Timeline:
        _author = Tweet.author.screen_name
        _text = Tweet.text
        title = '%s: %s' % (_author, _text)
        link = 'http://twitter.com/%s/status/%s' % (_author, Tweet.id)
        content = '<a href="http://twitter.com/%s"><b>%s</b></a>: %s' % (_author, _author, process(_text))
        date = Tweet.created_at.strftime('%a, %d %b %Y %H:%M:%S GMT')

        print entry.safe_substitute({'title': escape(title), 'link': link, 'content': escape(content), 'date': date})

    print '</channel>'
    print '</rss>'
